local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local localPlayer = Players.LocalPlayer
local camera = Workspace.CurrentCamera
local mouse = localPlayer:GetMouse()

local bulletSpeed = 1100 -- Bullet speed
local gravity = Vector3.new(0, -196.2, 0) -- Gravity in Roblox (m/s^2)
local FOV = 150 -- Field of view for the aimbot
local aimbotEnabled = false -- Toggle aimbot
local targetPlayer = nil -- Variable to hold the current target

local fovCircle = Drawing.new("Circle")
fovCircle.Visible = true
fovCircle.Thickness = 2
fovCircle.Radius = FOV
fovCircle.Color = Color3.fromRGB(255, 0, 0) -- Red circle
fovCircle.Filled = false

local tracerLine = Drawing.new("Line")
tracerLine.Visible = false -- Initially hidden
tracerLine.Thickness = 2
tracerLine.Color = Color3.fromRGB(0, 255, 0) -- Green tracer

local function updateFOVCircle()
    fovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
end

local function updateTracer()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        local headPosition, onScreen = camera:WorldToViewportPoint(head.Position)

        if onScreen then
            tracerLine.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
            tracerLine.To = Vector2.new(headPosition.X, headPosition.Y)
            tracerLine.Visible = true
        else
            tracerLine.Visible = false
        end
    else
        tracerLine.Visible = false
    end
end

local function getTargetVelocity(target)
    local rootPart = target.Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        return rootPart.Velocity
    end
    return Vector3.new(0, 0, 0)
end

local function isJumping(target)
    local velocity = getTargetVelocity(target)
    return velocity.Y > 2 -- Arbitrary value to detect upward movement (jumping)
end

local function predictMovement(target, distance)
    local velocity = getTargetVelocity(target)
    local timeToHit = distance / bulletSpeed -- Time it takes for bullet to reach the target

    local predictedPosition = target.Character.Head.Position
    if isJumping(target) then
        predictedPosition = predictedPosition + Vector3.new(0, velocity.Y * timeToHit, 0) -- Predict upwards if jumping
    end

    local horizontalVelocity = Vector3.new(velocity.X, 0, velocity.Z) -- Horizontal movement only
    local predictedHorizontalPosition = predictedPosition + (horizontalVelocity * timeToHit)

    local predictionFactor = math.clamp(distance / 300, 0.4, 1) -- Stronger prediction for far ranges

    return predictedPosition + ((predictedHorizontalPosition - predictedPosition) * predictionFactor)
end

local function predictBulletDrop(distance, timeToHit)
    local drop = 0.5 * gravity.Y * (timeToHit ^ 2) -- Bullet drop in the Y direction
    local compensationFactor = math.clamp(distance / 200, 0.1, 0.5) -- Compensation scale based on distance
    return Vector3.new(0, -drop * compensationFactor, 0) -- Adjust the aim upwards
end

local function getClosestTarget()
    local closestPlayer = nil
    local shortestDistance = FOV

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
            local distanceFromCrosshair = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)).magnitude

            if distanceFromCrosshair < shortestDistance and player.Character.Humanoid.Health > 0 and onScreen then
                closestPlayer = player
                shortestDistance = distanceFromCrosshair
            end
        end
    end

    return closestPlayer
end

local function aimAtTarget(target)
    if target and target.Character then
        local head = target.Character:FindFirstChild("Head")
        if head then

            local distance = (head.Position - camera.CFrame.Position).Magnitude

            local timeToHit = distance / bulletSpeed

            local predictedPosition = predictMovement(target, distance)

            local bulletDrop = predictBulletDrop(distance, timeToHit)

            local aimPosition = predictedPosition + bulletDrop

            camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
            targetPlayer = target -- Store the target for the tracer
        end
    else
        targetPlayer = nil
    end
end

RunService.RenderStepped:Connect(function()
    if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then -- Check if MouseButton2 is pressed
        aimbotEnabled = true
        targetPlayer = getClosestTarget() -- Get the closest target when aiming
        if targetPlayer then
            aimAtTarget(targetPlayer)
        end
    else
        aimbotEnabled = false
        targetPlayer = nil -- Reset target when not aiming
    end

    updateFOVCircle()
    updateTracer()
end)

RunService.RenderStepped:Connect(function()
    if not aimbotEnabled then
        tracerLine.Visible = false
    end
end)
